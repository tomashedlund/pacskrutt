package graphs;
import java.util.*;
import java.io.*;

public class MatrixGraph<TYPE> implements Graph<TYPE>, Serializable {
	/**
	 * Autogenerated serialVerisionUID
	 */
	private static final long serialVersionUID = -8505311396874459032L;
	private Object[][] edges;
	private Map<TYPE, Integer> nodeIndex = new HashMap<TYPE, Integer>();
	private int maxNodes;
	
	public MatrixGraph(){
		this.maxNodes = 2;
		this.edges = new Object[maxNodes][maxNodes];
	} // MatrixGraph
	public MatrixGraph(int maxNodes){
		this.maxNodes = maxNodes;
		this.edges = new Object[maxNodes][maxNodes];
	} // MatrixGraph
	
	@Override
	public void add(TYPE city) {
		int index = nodeIndex.size();
		nodeIndex.put(city, index);
		if (index >= maxNodes){
			Object[][] temp = new Object[maxNodes+1][maxNodes+1];
			for(int i = 0; i<maxNodes; i++)
				for(int j = 0; j<maxNodes; j++)
					temp[i][j] = this.edges[i][j];
			maxNodes++;
			this.edges = temp;
		}
	}

	@Override
	public void connect(TYPE from, TYPE to, String name, int weight) {
		Integer fromIndex = nodeIndex.get(from);
		Integer toIndex = nodeIndex.get(to);
		if(fromIndex == null || toIndex ==null)
			throw new NoSuchElementException("Noden har inte adderats till grafen");
		else if (weight < 0)
			throw new IllegalArgumentException("Vikten måste vara positivt heltal");
		else if (getEdgeBetween(from,to) != null && getEdgeBetween(to,from) != null)
			throw new IllegalStateException("Den tvåvägade förbindelsen finns redan");
		edges[fromIndex][toIndex] = new Edge<TYPE>(to,name,weight);
		edges[toIndex][fromIndex] = new Edge<TYPE>(from,name,weight);
	}

	@Override
	public void setConnectionWeight(TYPE from, TYPE to, int weight) {
		Integer fromIndex = nodeIndex.get(from);
		Integer toIndex = nodeIndex.get(to);
		if(fromIndex == null || toIndex == null)
			throw new NoSuchElementException("Noden har inte adderats till grafen");
		else if (weight < 0)
			throw new IllegalArgumentException("Vikten måste vara positivt heltal");
		else if (getEdgeBetween(from,to) == null || getEdgeBetween(to,from) == null)
			throw new NoSuchElementException("Förbindelsen finns inte");
		@SuppressWarnings("unchecked")
		Edge<TYPE> e1 = (Edge<TYPE>)edges[fromIndex][toIndex];
		e1.setWeight(weight);
		@SuppressWarnings("unchecked")
		Edge<TYPE> e2 = (Edge<TYPE>)edges[toIndex][fromIndex];
		e2.setWeight(weight);
	}

	@Override
	public List<TYPE> getNodes() {
		return new ArrayList<TYPE>(nodeIndex.keySet());
	}

	@Override
	public List<Edge<TYPE>> getEdgesFrom(TYPE city) {
		Integer index = nodeIndex.get(city);
		if (index == null) 
			throw new NoSuchElementException("Noden har inte adderats till grafen");
		List<Edge<TYPE>> neighbours = new ArrayList<Edge<TYPE>>();
		for(int i = 0; i < maxNodes; i++){
			@SuppressWarnings("unchecked")
			Edge<TYPE> e = (Edge<TYPE>)edges[index][i];
			if (e != null)
				neighbours.add(e);
		}
		return neighbours;
	}

	@Override
	public Edge<TYPE> getEdgeBetween(TYPE from, TYPE to) {
		Integer fromIndex = nodeIndex.get(from);
		Integer toIndex = nodeIndex.get(to);
		if(fromIndex == null || toIndex == null)
			throw new NoSuchElementException("Noden har inte adderats till grafen");
		
		if (edges[fromIndex][toIndex] != null) {
			@SuppressWarnings("unchecked")
			Edge<TYPE> e = (Edge<TYPE>)edges[fromIndex][toIndex];
			return e;
		}
		return null;
	}

	@Override
	public void remove(TYPE node) {
		Object[][] temp = new Object[maxNodes-1][maxNodes-1];
		int correct_i = 0, correct_j = 0, erase = nodeIndex.get(node);
		nodeIndex.remove(node);
		for(int i = 0; i < maxNodes-1; i++){
			if (i == erase)
				correct_i = 1;
			for(int j = 0; j < maxNodes-1; j++){ 
				if (j == erase)
					correct_j = 1;
				Object e = edges[i+correct_i][j+correct_j];
				temp[i][j] = e;
			}
			correct_j = 0;
		}
		for(TYPE t : nodeIndex.keySet()){
			int i = nodeIndex.get(t);
			if (i>erase)
				nodeIndex.put(t, --i);
		}
		this.maxNodes--;
		edges = temp;
	}

	@Override
	public void disconnect(TYPE from, TYPE to) {
		Integer fromIndex = nodeIndex.get(from);
		Integer toIndex = nodeIndex.get(to);
		if(fromIndex == null || toIndex == null)
			throw new NoSuchElementException("Noden har inte adderats till grafen");
		edges[fromIndex][toIndex] = null;
		edges[toIndex][fromIndex] = null;
	}
	@Override
	public String toString(){
		String str="";
		for(TYPE n : nodeIndex.keySet()){
			str += n.toString() + ": ";
			Integer fromIndex =  nodeIndex.get(n);
			for(int i = 0; i < maxNodes; i++){
				@SuppressWarnings("unchecked")
				Edge<TYPE> e = (Edge<TYPE>)edges[fromIndex][i];
				if (e != null)
					str += e.toString() + " ";
			}
			str += "\n";
		}
		return str;
	} // toString
}
