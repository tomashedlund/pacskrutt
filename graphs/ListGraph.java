package graphs;
import java.io.*;
import java.util.*;

public class ListGraph<TYPE> implements Graph<TYPE>, Serializable {
	/**
	 * Autogenerated serialVerisionUID
	 */
	private static final long serialVersionUID = 5246330949181623569L;
	private Map<TYPE, List<Edge<TYPE>>> nodes = new HashMap<TYPE, List<Edge<TYPE>>>();
	
	public void add(TYPE node) {
		if(!nodes.containsKey(node))
			nodes.put(node, new ArrayList<Edge<TYPE>>());
	} // add
	public void connect(TYPE from, TYPE to, String name, int weight) {
		
		List<Edge<TYPE>> flist = nodes.get(from);
		List<Edge<TYPE>> tlist = nodes.get(to);
		if(flist == null || tlist ==null)
			throw new NoSuchElementException("Noden har inte adderats till grafen");
		else if (weight < 0)
			throw new IllegalArgumentException("Vikten måste vara positivt heltal");
		else if (getEdgeBetween(from,to) != null && getEdgeBetween(to,from) != null)
			throw new IllegalStateException("Den tvåvägade förbindelsen finns redan");
		Edge<TYPE> e1 = new Edge<TYPE>(to, name, weight);
		flist.add(e1);
		Edge<TYPE> e2 = new Edge<TYPE>(from, name, weight);
		tlist.add(e2);
	} // connect
	public void setConnectionWeight(TYPE from, TYPE to, int weight){
		if (nodes.get(from) == null || nodes.get(to) == null)
			throw new NoSuchElementException("Noden har inte adderats till grafen");
		Edge<TYPE> e1 = getEdgeBetween(from, to);  
		Edge<TYPE> e2 = getEdgeBetween(to, from);
		if (e1 == null && e2 == null)
			throw new NoSuchElementException("Förbindelsen finns inte");
		if(weight < 0)
			throw new IllegalArgumentException("Vikten måste vara positivt heltal");
		if (e1 != null)
			e1.setWeight(weight);
		if (e2 != null)
			e2.setWeight(weight);
	}
	public List<TYPE> getNodes(){
		return new ArrayList<TYPE>(nodes.keySet());
	} // getNodes
	public List<Edge<TYPE>> getEdgesFrom(TYPE node){
		if (nodes.get(node) == null) 
			throw new NoSuchElementException("Noden har inte adderats till grafen");
		return new ArrayList<Edge<TYPE>>(nodes.get(node));
	} // getEdgesFrom
	public Edge<TYPE> getEdgeBetween(TYPE from, TYPE to) {
		if (nodes.get(from) == null || nodes.get(to) == null)
			throw new NoSuchElementException("Noden har inte adderats till grafen");
		for (Edge<TYPE> e : nodes.get(from)) 
			if (e.getDestination().equals(to))
				return e;
		return null;
	} // getEdgeBetween
	public void remove(TYPE node){
		for (Edge<TYPE> e1 : nodes.get(node)){ 
			Edge<TYPE> e2 = getEdgeBetween(e1.getDestination(),node);
			nodes.get(e1.getDestination()).remove(e2);
		}
		nodes.remove(node);
	}
	public void disconnect(TYPE from, TYPE to){
		if (nodes.get(from) == null || nodes.get(to) == null)
			throw new NoSuchElementException("Noden har inte adderats till grafen");
		Edge<TYPE> e1 = getEdgeBetween(from, to);
		Edge<TYPE> e2 = getEdgeBetween(to, from);
		nodes.get(from).remove(e1);
		nodes.get(to).remove(e2);
	}
	@Override
	public String toString(){
		String str="";
		for(Map.Entry<TYPE, List<Edge<TYPE>>> me : nodes.entrySet()){
			str += me.getKey().toString() + ": "; 
			for(Edge<TYPE> e : me.getValue())
				str += e.toString() + " ";
			str += "\n";
		}
		return str;
	} // toString
}